---
name: Test Suite

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        database-url: [
          "sqlite:///testsuite",
          "sqlite+aiosqlite:///testsuite",
          "mysql://username:password@localhost:3306/testsuite",
          "mysql+aiomysql://username:password@localhost:3306/testsuite",
          "mysql+asyncmy://username:password@localhost:3306/testsuite",
          "postgresql://username:password@localhost:5432/testsuite",
          "postgresql+aiopg://username:password@127.0.0.1:5432/testsuite",
          "postgresql+asyncpg://username:password@localhost:5432/testsuite",
        ]

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_USER: username
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testsuite
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testsuite
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v1"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: "scripts/install"
      - name: "Run linting checks"
        run: "scripts/check"
      - name: "Build package & docs"
        run: "scripts/build"
      - name: "Run tests"
        if: ${{ matrix.python-version != '3.6' || matrix.database-url != 'mysql+asyncmy://username:password@localhost:3306/testsuite' }}
        env:
          TEST_DATABASE_URL: "${{ matrix.database-url }}"
        run: "scripts/test"
      - name: Upload code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-results
          path: .coverage.*
  
  coverage:
    name: "Python ${{ matrix.python-version }}"
    needs: tests
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]

    steps:
      - uses: "actions/checkout@v2"
      - name: Download code coverage results
        uses: actions/download-artifact@v2
        with:
          name: code-coverage-results
      - name: "Install coverage.py"
        run: "pip install coverage"
      - name: "Enforce coverage"
        run: "./scripts/coverage"
